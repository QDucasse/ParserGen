 Program ={ Include },{ Raccourci }, Main ;
 Include = "#include" , "<" , identifier , ">" ;
 Raccourci = "using" , "namespace" , identifier , ";" ;
 Number = Integer | doubleNumber ;
 Type = "int" | "double" ;
 Term =[ "-" ],( identifier | Number );
 FonctionMath = "cos" | "sin" | "pow" | "sqrt" ;
 Fonction = FonctionMath , "(" , Expression ,{ "," , Expression }, ")" ;
 Std = "std::" ;
 FonctionPrint =([ Std ], "cout" ,( "<<" | "<" , "<" ), Expression ,( "<<" | "<" , "<" ),{ Expression ,( "<<" | "<" , "<" )},[ Std ], "endl" );
 SimpleExpression = Fonction | Term | String ;
 Expression = SimpleExpression ,{( "==" | "=" | "+" | ":" , ":" | "-" | "<" | ">" | "<=" | ">=" | "/" | "*" ), SimpleExpression };
 ExpressionC =( FonctionPrint | Expression ), ";" ;
 Assignment = Type , identifier ,{ "," , identifier }, "=" , Expression , ";" ;
 IfStatement = "if" , "(" , Expression , ")" ,[ "{" ],{ Statement },[ "}" ],[ "else if" , "(" , Expression , ")" ,[ "{" ],{ Statement },[ "}" ]],[ "else" , "{" ,{ Statement }, "}" ];
 ForStatement = "for" , "(" , Statement , ExpressionC , Expression , ")" ,[ "{" ],{ Statement },[ "}" ];
 WhileStatement = "while" , "(" , Expression , ")" ,[ "{" ],{ Statement },[ "}" ];
 Return = "return" , ExpressionC ;
 Statement = IfStatement | ForStatement | WhileStatement | Return | Assignment | ExpressionC ;
 DeclareMethode = Type , identifier , "(" ,[ Type , identifier ,{ "," , Type , identifier }], ")" ;
 Methode = DeclareMethode , "{" ,{ statement }, "}" ;
 Main = Type , "main" , "(" ,[ Type , Identifier ,{ "," , Type , Identifier }], ")" , "{" ,{ Statement }, "}" ;
 letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
 digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
 Whitespace = " " ;
 Integer = digit ,{ digit };
 doubleNumber = digit ,{ digit },[ "." , digit ,{ digit }];
 identifier = letter ,{ letter | digit };
 String = '"' , allCharacters , '"' ;
 specialCharacter = "?" | "_" | "!" ;
 allCharacters ={ letter | whitespace | specialCharacter };
